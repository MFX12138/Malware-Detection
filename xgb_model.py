# -*- coding: utf-8 -*-
import numpy as np
import pandas as pd
import xgboost as xgb
from sklearn.feature_extraction.text import TfidfVectorizer  
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import log_loss
from sklearn.model_selection import StratifiedKFold
DATA_PATH = '..'
# SET INPUT COLUMNS TYPE
DATA_TYPE = {
    'label':np.uint8,
    'file_id':np.uint32,
    'tid':np.uint16,
    'index':np.uint16
}
# MULTI-CALSS NUM
CLASS_NUM = 8
# GBT TRAIN ROUND NUM
NUM_ROUND = 1000

# 5-Folds CV Param
skf = StratifiedKFold(n_splits=5, random_state=4, shuffle=True)

api_vec = TfidfVectorizer(ngram_range=(1,4),
                      min_df=3, max_df=0.9, 
                      strip_accents='unicode', 
                      use_idf=1,smooth_idf=1, sublinear_tf=1)

#TF-IDF模型训练
def tfidfModelTrain(train, test):
    tr_api = train.groupby('file_id')['api'].apply(lambda x:' '.join(x)).reset_index()
    te_api = test.groupby('file_id')['api'].apply(lambda x:' '.join(x)).reset_index()
    tr_api_vec = api_vec.fit_transform(tr_api['api'])
    val_api_vec = api_vec.transform(te_api['api'])
    return (tr_api_vec,val_api_vec)  

# NB-LR
def pr(x, y_i, y):
    p = x[y==y_i].sum(0)
    return (p+1) / ((y==y_i).sum()+1)

def get_mdl(x, y):
    y = y.values
    r = np.log(pr(x,1,y) / pr(x,0,y))
    np.random.seed(0)
    m = LogisticRegression(C=8, dual=True,random_state=0)
    x_nb = x.multiply(r)
    return m.fit(x_nb, y), r

#NB-LR Train
def nblrTrain(tr_tfidf_rlt, te_tfidf_rlt, train):
    label_fold=[]
    preds_fold_lr=[]
    lr_oof = pd.DataFrame()
    preds_te = []
    for fold_i,(tr_index,val_index) in enumerate(skf.split(train, train['label'])):
        if fold_i>=0:
            tr,val = train.iloc[tr_index],train.iloc[val_index]
            x = tr_tfidf_rlt[tr_index,:]
            test_x = tr_tfidf_rlt[val_index,:]        
            preds = np.zeros((len(val), CLASS_NUM))
            preds_te_i = np.zeros((te_tfidf_rlt.shape[0],CLASS_NUM))
            labels = [i for i in range(CLASS_NUM)]
            for i, j in enumerate(labels):
                print('fit', j)
                m,r = get_mdl(x, tr['label'] == j)
                preds[:,i] = m.predict_proba(test_x.multiply(r))[:,1]
                preds_te_i[:,i] = m.predict_proba(te_tfidf_rlt.multiply(r))[:,1]
            preds_te.append(preds_te_i)
            preds_lr = preds
            lr_oof_i = pd.DataFrame({'file_id':val['file_id']})
            for i in range(CLASS_NUM):
                lr_oof_i['prob'+str(i)] = preds[:,i]
            lr_oof = pd.concat([lr_oof,lr_oof_i],axis=0)
    
            for i,j in enumerate(preds_lr):
                preds_lr[i] = j/sum(j)
            #log_loss_i = log_loss(val['label'], preds_lr)
            #print(log_loss_i)
            label_fold.append(val['label'].tolist())
            preds_fold_lr.append(preds_lr)
            
            lr_oof = lr_oof.sort_values('file_id')
            preds_te_avg = (np.sum(np.array(preds_te),axis=0) / 5)
            lr_oof_te = pd.DataFrame({'file_id':range(0,te_tfidf_rlt.shape[0])})
            for i in range(CLASS_NUM):
                lr_oof_te['prob'+str(i)] = preds_te_avg[:,i]
    return (lr_oof, lr_oof_te)